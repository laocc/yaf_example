[cache]

;默认是否启动，若=true则须在路由中明确关闭才会不启动，若=false则须在路由中明确开启才会有效
autorun = true

;参与组合cache key时的一个值，修改TOKEN可使所有cache立即失效
token = cacheToken

;参于cache key的$_GET项，如果当前请求有此参数就加上，没有则不加，所以就要求你的全站这些参数最好有个统一的规则，不要太随意
keys.0 = p

;驱动器，目前可选：yac/apcu/redis/memcache/memcached，都依赖laocc/dbs库
;如果你想实现其他驱动或有更好的驱动，告诉我，可以考虑加上
driver = redis

;缓存有效期，秒
expires = 1

;保存时键名前缀，任意，别太长，和token一样，修改会使所有缓存立即过期
fix = cache


;如果driver用redis,memcache，须另外定义相应的连接信息，yac,apcu不需要，推荐用yac
;若不在这里设置，可以在创建cache对象时指定
redis.host = 127.0.0.1
redis.port = 6379
redis.db = 3

memcache.host = 127.0.0.1
memcache.port = 11211

[static]
;进行静态化的URL，静态化是将HTML保存为相应的文件，文件名由正则能匹配到的结果确定，也就是URI
;文件保存于/public/中
;被静态化的文件不可以是php文件，也不可以是/结束的目录名
match.0 = '/^\/\w+\/.+\.(html)([\?\#].*)?$/i'
match.1 = '/^\/article\/.+\.html$/i'

;静态文件保留多长时间，纯数字表示从生成时算起的秒数，如果为0，则不检查是否过期
expires = 86400

;自动删除静态文件时所须验证的token，如果修改了这个值，所有已生成静态须手工清除，否则无法删除，所以一旦确定，尽量不要修改
token = token

;组合自动检查静态文件过期的URL时第一个参数，程序据此判断是否该类型请求，和token一样，如果修改了，也要手工先清除所有已生成过的静态文件
action = _check_static_expires_

;检查方法：生成静态时在HTML中加一个JS形式的请求，再由这个连接去判断是否过期。



[route]
;路由表文件及节点名称
file = _ROOT'config/routes.ini'
root = product

[view]
;这些可以是true/false，默认值都是false，也就是当=false或不设置时，路由中相关设置不再有效
layout = true
smarty = true
static = true
concat = false

;layout的另外两种可设置值：
;1，设置框架视图文件名称：layout = frame.php，此时优先读/APP/views/index/frame.php，若不存在再读/APP/views/frame.php；默认值是layout.php，
;2，设置框架文件：layout = layout/layout_161120.php，和上面的区别在于这儿有/号，此时不再象上面那样查找两次
;3，指定完整地址的文件：layout = /PATH/layout1.php，和第2项的区别是以/开头的绝对路径文件

;smarty的另一种设置解释器缓存目录：
;1，指定相对于getcwd()的目录：smarty = cache/smarty，默认值是getcwd()/templates_c
;2，指定绝对路径：smarty = /PATH/smarty，区别在于以/开头
;3，另外，对于smarty的相关设置可以在控制器中直接调用设置，如：$this->smarty()->ACTION();

;这两项设置只有在路由中layout/smarty=true时才有效，路由中也按上面方法设置


[error]
;出错信息中是否显示路由结果
route = true

;字体大小，可以是12px，或100%(相对于1em即16px)
fontsize = 80%

;文件名信息中要过滤的内容，主要用于过滤网站根目录，一则为了看着不太长，另外在生产环境中尽量不要显示根目录信息
;但在CLI和回调发送的信息中不会过滤
root = _ROOT








